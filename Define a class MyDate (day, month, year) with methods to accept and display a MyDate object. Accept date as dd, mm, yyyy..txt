//Define a class MyDate (day, month, year) with methods to accept and display a MyDate object. Accept date as dd, mm, yyyy. Throw user defined exception "InvalidDateException" if the date is invalid. Examples of invalid dates: 12 15 2015, 31 6 1990, 29 2 2001




class InvalidDateException extends Exception {
    public InvalidDateException(String message) {
        super(message);
    }
}

class MyDate {
    private int day;
    private int month;
    private int year;

    public MyDate(int day, int month, int year) throws InvalidDateException {
        if (isValidDate(day, month, year)) {
            this.day = day;
            this.month = month;
            this.year = year;
        } else {
            throw new InvalidDateException("Invalid date: " + day + " " + month + " " + year);
        }
    }

    private boolean isValidDate(int day, int month, int year) {
        if (month < 1 || month > 12) {
            return false;
        }

        int[] daysInMonth = {0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};

        if (day < 1 || day > daysInMonth[month]) {
            return false;
        }

        // Check for leap year
        if (month == 2 && day == 29) {
            return (year % 4 == 0 && year % 100 != 0) || (year % 400 == 0);
        }

        return true;
    }

    public void displayDate() {
        System.out.println("Date: " + day + " " + month + " " + year);
    }
}

public class TestMyDate {
    public static void main(String[] args) {
        try {
            MyDate date1 = new MyDate(12, 5, 2022); // Valid date
            date1.displayDate();

            // Example invalid dates
            MyDate date2 = new MyDate(12, 15, 2015); // Invalid date
            date2.displayDate();
        } catch (InvalidDateException e) {
            System.out.println("Exception: " + e.getMessage());
        }
    }
}

output:-

Date: 12 5 2022
Exception: Invalid date: 12 15 2015