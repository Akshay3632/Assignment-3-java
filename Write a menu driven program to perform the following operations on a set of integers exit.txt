import java.io.FileWriter;
import java.io.IOException;
import java.util.HashSet;
import java.util.Random;
import java.util.Set;

public class IntegerSetOperations {
    private static Set<Integer> integerSet = new HashSet<>();

    public static void main(String[] args) {
        boolean exit = false;
        while (!exit) {
            System.out.println("\nMenu:");
            System.out.println("1. Load");
            System.out.println("2. Save");
            System.out.println("3. Exit");
            System.out.print("Enter your choice: ");

            int choice = getUserInput();
            switch (choice) {
                case 1:
                    loadOperation();
                    break;
                case 2:
                    saveOperation();
                    break;
                case 3:
                    exit = true;
                    System.out.println("Exiting the program.");
                    break;
                default:
                    System.out.println("Invalid choice. Please enter a valid option.");
            }
        }
    }

    private static void loadOperation() {
        integerSet.clear();
        Random random = new Random();
        for (int i = 0; i < 10; i++) {
            int randomInt = 10 + random.nextInt(90); // Generates random 2-digit integers
            integerSet.add(randomInt);
            System.out.println(randomInt);
        }
        System.out.println("Numbers loaded successfully.");
    }

    private static void saveOperation() {
        try (FileWriter fileWriter = new FileWriter("numbers.txt")) {
            for (int number : integerSet) {
                fileWriter.write(String.valueOf(number) + "\n");
            }
            System.out.println("Numbers saved to 'numbers.txt' successfully.");
        } catch (IOException e) {
            System.out.println("Error while saving numbers: " + e.getMessage());
        }
    }

    private static int getUserInput() {
        try {
            return Integer.parseInt(System.console().readLine());
        } catch (NumberFormatException e) {
            System.out.println("Invalid input. Please enter a valid integer.");
            return getUserInput();
        }
    }
}


output:-


 Menu:
1. Load
2. Save
3. Exit
Enter your choice: 1
83
45
27
69
12
56
38
91
20
74
Numbers loaded successfully.

Menu:
1. Load
2. Save
3. Exit
Enter your choice: 2
Numbers saved to 'numbers.txt' successfully.

Menu:
1. Load
2. Save
3. Exit
Enter your choice: 3
Exiting the program.